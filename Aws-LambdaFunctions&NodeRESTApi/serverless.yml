service: aws-lambda-node-restapi
frameworkVersion: '2 || 3'

provider:
  name: aws  #el provider o Cloud al que subir la funcion
  runtime: nodejs12.x #runtime para ejecutarla
  lambdaHashingVersion: '20201221' # Id único del proyecto 
  region: eu-west-2 #region donde subir la función
  iamRoleStatements: #conexión a DynamoDB
    - Effect: Allow
      Action: 
        - dynamodb:*
      Resource:
        - arn:aws:dynamodb:eu-west-2:433832615018:table/TaskTable

functions:
  createTask: #nombre de la funcion
    handler: src/addTask.ADD_TASK # folder/archivo.funcion
    events:
      - httpApi: # especifico que voy a usar http(s)
          path: /tasks  # ruta de la funcion
          method: post # metodo de la funcion
  getTasks: 
    handler: src/getTasks.GET_TASKS  
    events:
      - httpApi:
          path: /tasks  
          method: get 
  getTask: 
    handler: src/getTask.GET_TASK 
    events:
      - httpApi: # voy a usar un método HTTP
          path: /tasks/{id} # en serverless un param va en {}  
          method: get 
  updateTask: 
    handler: src/updateTask.UPDATE_TASK # folder/archivo.funcion
    events:
      - httpApi: # vas a usar un método HTTP
          path: /tasks/{id} # en serverless un param va en {}  
          method: put 
  deleteTask: 
    handler: src/deleteTask.DELETE_TASK # folder/archivo.funcion
    events:
      - httpApi: # vas a usar un método HTTP
          path: /tasks/{id} # en serverless un param va en {}  
          method: delete 

resources: 
  Resources:
    TaskTable:
    # se creará esta tabla
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: TaskTable # nombre de la tabla
        # BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id 
            AttributeType: S # string
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1